# Usage:
# This docker composition is meant to be invoked using the npm scripts in package.json.
# Run `npm run e2e` to create the database, then remix, then run the playwright tests.
# Run `npm run e2e:cleanup` to clean up running and exited containers.
# Run `npm run e2e:update` to update the playwright linux snapshots.
#
# Advanced usage:
# Run `docker-compose up -d --build` to start up all the services
# Run `docker-compose exec playwright npx playwright test` to run tests
# Run `docker-compose down -v --remove-orphans` to cleanup
# Note: This usage *requires* running docker-compose down; otherwise containers are
#       will hang around forever. Not suitable for CI.
version: "3.7"
name: participant-e2e
services:
  # Create a database to run e2e tests against
  database:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: incredible_local_secret_phrase
      POSTGRES_USER: postgres
    # Check that the database is up and running
    healthcheck:
      test: "pg_isready --username=postgres"
      timeout: 5s
      retries: 20
    networks:
      - participant_portal-e2e # Create a remix server to run e2e tests against

  app-e2e:
    build:
      # This target includes entrypoint-e2e.sh which will force reset the prisma migrations
      target: e2e
      context: .
    # The database must be up and running before the remix server will start
    depends_on:
      database:
        condition: service_healthy
      s3_local:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:incredible_local_secret_phrase@database:5432/postgres?schema=public
      S3_ENDPOINT_URL: http://s3.s3_local:5566
      AWS_ACCESS_KEY_ID: "test"
      AWS_SECRET_ACCESS_KEY: "test"
      MAX_UPLOAD_FILECOUNT: 5
      MAX_UPLOAD_SIZE_BYTES: 5242880
      PORT: 3005
    # Check that the remix server is up and running
    healthcheck:
      test: "curl -f http://localhost:3005/healthcheck || exit 1"
      timeout: 5s
      retries: 20
    init: true
    networks:
      - participant_portal-e2e
    # Expose a port in case it's useful for debugging
    ports:
      - 3005:3005

  # Create an S3 Localstack server for e2e tests
  s3_local:
    image: localstack/localstack:latest
    environment:
      SERVICES: s3
      AWS_DEFAULT_REGION: us-west-2
      EDGE_PORT: 5566
      HOSTNAME_EXTERNAL: s3_local
    healthcheck:
      test: "curl -f http://localhost.localstack.cloud:5566/_localstack/health || exit 1"
      timeout: 5s
      retries: 5
    ports:
      - "5566:5566"
    networks:
      participant_portal-e2e:
        aliases:
          - s3.localhost.localstack.cloud
          - s3.s3_local
          - participant-uploads.s3.s3_local

  # Create the playwright container
  playwright:
    build:
      # Use a different Dockerfile specifically to build a slim container just for playwright
      context: .
      dockerfile: Dockerfile.playwright
    # Remix must be up and running before playwright will start
    depends_on:
      app-e2e:
        condition: service_healthy
    init: true
    networks:
      - participant_portal-e2e
    # Bind mount some local directories to make working on e2e tests faster
    # and to be able to update snapshots
    volumes:
      - ./e2e:/srv/e2e
      - ./playwright-report:/srv/playwright-report
      - ./test-results:/srv/test-results

networks:
  participant_portal-e2e:
